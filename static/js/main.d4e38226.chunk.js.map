{"version":3,"sources":["store/index.ts","api/api.ts","api/posts.ts","store/selectors.ts","components/PostsList/PostsList.tsx","api/comments.ts","components/NewCommentForm/NewCommentForm.tsx","components/PostDetails/PostDetails.tsx","components/Header/Header.tsx","App.tsx","index.tsx"],"names":["ActionType","BASE_URL","getUserPosts","userId","a","fetch","response","json","getPostDetails","postId","getUsers","deletePost","method","setUsers","createAction","SET_USERS","setUserId","SET_USERID","setPostDetailsId","SET_POSTDETAILS_ID","setUserPosts","SET_USER_POSTS","setComments","SET_COMMENTS","reducer","createReducer","users","postDetailsId","userPosts","comments","builder","addCase","state","action","payload","store","configureStore","getUsersSelector","getUserSelector","getPostDetailsId","getUserPostsFromState","getComments","PostsList","dispatch","useDispatch","useSelector","selectedPostId","useEffect","loadUserPostFromServer","userPostFromServer","setSelectedPostId","deletePostFromServer","className","map","post","title","type","onClick","id","getPostComments","responst","deleteComment","commentId","addComment","obj","body","JSON","stringify","headers","NewCommentForm","useState","name","setName","email","setEmail","comment","setComment","formSubmit","event","preventDefault","newComment","result","onSubmit","placeholder","value","onChange","target","PostDetails","postDetails","setPostDetails","visible","setVisible","then","delComment","newComments","length","Header","loadUsersFromServer","usersFromServer","user","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d4e38226.chunk.js","sourcesContent":["/* eslint-disable max-len */\nimport { configureStore, createAction, createReducer } from '@reduxjs/toolkit';\nimport {\n  Post, State, User, Comment,\n} from '../react-app-env';\n\nenum ActionType {\n  SET_USERS = 'SET_USERS',\n  SET_USERID = 'SET_USERID',\n  SET_POSTDETAILS_ID = 'SET_POSTDETAILS_ID',\n  SET_USER_POSTS = 'SET_USER_POSTS',\n  SET_COMMENTS = 'SET_COMMENTS',\n}\n\nconst InitialState:State = {\n  users: [],\n  userId: 0,\n  postDetailsId: 0,\n  userPosts: [],\n  comments: [],\n};\n\nexport const setUsers = createAction<User[]>(ActionType.SET_USERS);\nexport const setUserId = createAction<number>(ActionType.SET_USERID);\nexport const setPostDetailsId = createAction<number>(ActionType.SET_POSTDETAILS_ID);\nexport const setUserPosts = createAction<Post[]>(ActionType.SET_USER_POSTS);\nexport const setComments = createAction<Comment[]>(ActionType.SET_COMMENTS);\n\nconst reducer = createReducer(InitialState, (builder) => {\n  builder.addCase(setUsers, (state, action) => {\n    // eslint-disable-next-line no-param-reassign\n    state.users = action.payload;\n  });\n  builder.addCase(setUserId, (state, action) => {\n    // eslint-disable-next-line no-param-reassign\n    state.userId = action.payload;\n  });\n  builder.addCase(setPostDetailsId, (state, action) => {\n    // eslint-disable-next-line no-param-reassign\n    state.postDetailsId = action.payload;\n  });\n  builder.addCase(setUserPosts, (state, action) => {\n    // eslint-disable-next-line no-param-reassign\n    state.userPosts = action.payload;\n  });\n  builder.addCase(setComments, (state, action) => {\n    // eslint-disable-next-line no-param-reassign\n    state.comments = action.payload;\n  });\n});\n\nexport const store = configureStore({\n  reducer,\n});\n","export const BASE_URL = 'https://mate.academy/students-api';\n","import { BASE_URL } from './api';\n\nexport const getUserPosts = async (userId:number) => {\n  const response = await fetch(userId ? `${BASE_URL}/posts?userId=${userId}` : `${BASE_URL}/posts`);\n\n  return response.json();\n};\n\nexport const getPostDetails = async (postId:number) => {\n  const response = await fetch(`${BASE_URL}/posts/${postId}`);\n\n  return response.json();\n};\n\nexport const getUsers = async () => {\n  const response = await fetch(`${BASE_URL}/users`);\n\n  return response.json();\n};\n\nexport const deletePost = async (postId:number) => {\n  await fetch(`${BASE_URL}/posts/${postId}`, { method: 'DELETE' });\n};\n","import { State } from '../react-app-env';\n\nexport const getUsersSelector = (state:State) => state.users;\nexport const getUserSelector = (state:State) => state.userId;\nexport const getPostDetailsId = (state:State) => state.postDetailsId;\nexport const getUserPostsFromState = (state: State) => state.userPosts;\nexport const getComments = (state: State) => state.comments;\n","/* eslint-disable max-len */\n/* eslint-disable @typescript-eslint/no-unused-expressions */\nimport React, { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { deletePost, getUserPosts } from '../../api/posts';\nimport { setPostDetailsId, setUserPosts } from '../../store';\nimport { getPostDetailsId, getUserPostsFromState, getUserSelector } from '../../store/selectors';\nimport './PostsList.scss';\n\nexport const PostsList: React.FC = () => {\n  const dispatch = useDispatch();\n  const userPosts = useSelector(getUserPostsFromState);\n  const userId = useSelector(getUserSelector);\n  const selectedPostId = useSelector(getPostDetailsId);\n\n  useEffect(() => {\n    const loadUserPostFromServer = async () => {\n      const userPostFromServer = await getUserPosts(userId);\n\n      dispatch(setUserPosts(userPostFromServer));\n    };\n\n    loadUserPostFromServer();\n  }, [userId]);\n\n  const setSelectedPostId = (postId: number) => {\n    dispatch(setPostDetailsId(postId));\n  };\n\n  const deletePostFromServer = async (postId:number) => {\n    await deletePost(postId);\n\n    const userPostFromServer = await getUserPosts(userId);\n\n    dispatch(setUserPosts(userPostFromServer));\n  };\n\n  return (\n    <div className=\"PostsList\">\n      <h2>Posts:</h2>\n\n      <ul className=\"PostsList__list\" data-cy=\"postDetails\">\n        {userPosts?.map(post => (\n          <li\n            className=\"PostsList__item\"\n            key={post.id}\n          >\n            <div>\n              <b>\n                {`[User #${post.userId}]:`}\n              </b>\n              {post.title}\n            </div>\n\n            <div>\n              <button\n                type=\"button\"\n                className=\"PostsList__button button\"\n                onClick={() => {\n                  selectedPostId === post.id\n                    ? setSelectedPostId(0)\n                    : setSelectedPostId(post.id);\n                }}\n              >\n                { selectedPostId === post.id ? 'Close' : 'Open'}\n              </button>\n\n              <button\n                type=\"button\"\n                className=\"button danger\"\n                onClick={() => deletePostFromServer(post.id)}\n              >\n                Delete\n              </button>\n            </div>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import { NewComment } from '../react-app-env';\nimport { BASE_URL } from './api';\n\nexport const getPostComments = async (postId:number) => {\n  const responst = await fetch(`${BASE_URL}/comments?postId=${postId}`);\n\n  return responst.json();\n};\n\nexport const deleteComment = async (commentId:number) => {\n  await fetch(`${BASE_URL}/comments/${commentId}`, { method: 'DELETE' });\n};\n\nexport const addComment = async (obj:NewComment) => {\n  await fetch(`${BASE_URL}/comments`,\n    {\n      method: 'POST',\n      body: JSON.stringify(obj),\n      headers: { 'Content-type': 'application/json; charset=UTF-8' },\n    });\n};\n","import React, { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addComment, getPostComments } from '../../api/comments';\nimport { NewComment } from '../../react-app-env';\nimport { setComments } from '../../store';\nimport { getPostDetailsId } from '../../store/selectors';\nimport './NewCommentForm.scss';\n\nexport const NewCommentForm: React.FC\n  = () => {\n    const dispatch = useDispatch();\n    const [name, setName] = useState('');\n    const [email, setEmail] = useState('');\n    const [comment, setComment] = useState('');\n    const postId = useSelector(getPostDetailsId);\n\n    const clearInput = () => {\n      setName('');\n      setEmail('');\n      setComment('');\n    };\n\n    const formSubmit = async (event:React.FormEvent) => {\n      event.preventDefault();\n\n      const newComment:NewComment = {\n        name,\n        email,\n        body: comment,\n        postId,\n      };\n\n      await addComment(newComment);\n      const result = await getPostComments(postId);\n\n      dispatch(setComments(result));\n\n      clearInput();\n    };\n\n    return (\n      <form\n        className=\"NewCommentForm\"\n        onSubmit={formSubmit}\n      >\n        <div className=\"form-field\">\n          <input\n            type=\"text\"\n            name=\"name\"\n            placeholder=\"Your name\"\n            className=\"NewCommentForm__input\"\n            value={name}\n            onChange={(event) => {\n              setName(event.target.value);\n            }}\n          />\n        </div>\n\n        <div className=\"form-field\">\n          <input\n            type=\"text\"\n            name=\"email\"\n            placeholder=\"Your email\"\n            className=\"NewCommentForm__input\"\n            value={email}\n            onChange={(event) => {\n              setEmail(event.target.value);\n            }}\n          />\n        </div>\n\n        <div className=\"form-field\">\n          <textarea\n            name=\"body\"\n            placeholder=\"Type comment here\"\n            className=\"NewCommentForm__input\"\n            value={comment}\n            onChange={(event) => {\n              setComment(event.target.value);\n            }}\n          />\n        </div>\n\n        <button\n          type=\"submit\"\n          className=\"NewCommentForm__submit-button button\"\n        >\n          Add a comment\n        </button>\n      </form>\n    );\n  };\n","/* eslint-disable @typescript-eslint/no-unused-expressions */\nimport React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { deleteComment, getPostComments } from '../../api/comments';\nimport { getPostDetails } from '../../api/posts';\nimport { Post } from '../../react-app-env';\nimport { setComments } from '../../store';\nimport { getComments, getPostDetailsId } from '../../store/selectors';\nimport { NewCommentForm } from '../NewCommentForm';\nimport './PostDetails.scss';\n\nexport const PostDetails: React.FC = () => {\n  const dispatch = useDispatch();\n  const [postDetails, setPostDetails] = useState<Post>();\n  const [visible, setVisible] = useState(true);\n  const comments = useSelector(getComments);\n  const postId = useSelector(getPostDetailsId);\n\n  useEffect(() => {\n    getPostDetails(postId)\n      .then(response => setPostDetails(response));\n\n    getPostComments(postId)\n      .then(response => dispatch(setComments(response)));\n  }, [postId]);\n\n  const delComment = async (id: number) => {\n    await deleteComment(id);\n    const newComments = await getPostComments(postId);\n\n    dispatch(setComments(newComments));\n  };\n\n  return (\n    <div className=\"PostDetails\">\n      <h2>Post details:</h2>\n      <section className=\"PostDetails__post\">\n        <p>{postDetails?.title}</p>\n      </section>\n\n      <section className=\"PostDetails__comments\">\n        {comments.length > 0\n          ? (\n            <button\n              type=\"button\"\n              className=\"button\"\n              onClick={() => {\n                visible ? setVisible(false) : setVisible(true);\n              }}\n            >\n              {visible ? `Hide ${comments.length} comments` : `Show ${comments.length} comments`}\n            </button>\n          )\n          : (<h3>No comments</h3>)}\n\n        {visible && (\n          <ul className=\"PostDetails__list\">\n            {comments.map(comment => (\n              <li className=\"PostDetails__list-item\" key={comment.id}>\n                <button\n                  type=\"button\"\n                  className=\"PostDetails__remove-button button\"\n                  onClick={() => delComment(comment.id)}\n                >\n                  X\n                </button>\n                <p>{comment.body}</p>\n              </li>\n            ))}\n          </ul>\n        )}\n      </section>\n\n      <section>\n        <div className=\"PostDetails__form-wrapper\">\n          <NewCommentForm />\n        </div>\n      </section>\n    </div>\n  );\n};\n","import React, { useEffect } from 'react';\nimport './Header.scss';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getUsers } from '../../api/posts';\nimport { getUsersSelector } from '../../store/selectors';\nimport { setUserId, setUsers } from '../../store';\n\nexport const Header:React.FC = () => {\n  const dispatch = useDispatch();\n  const users = useSelector(getUsersSelector);\n\n  useEffect(() => {\n    const loadUsersFromServer = async () => {\n      const usersFromServer = await getUsers();\n\n      dispatch(setUsers(usersFromServer));\n    };\n\n    loadUsersFromServer();\n  }, []);\n\n  const setUserID = (userId: number) => {\n    dispatch(setUserId(userId));\n  };\n\n  return (\n    <header className=\"App__header\">\n      <label>\n        Select a user: &nbsp;\n\n        <select\n          className=\"App__user-selector\"\n          onChange={event => setUserID(+event.target.value)}\n        >\n          <option value=\"0\">All users</option>\n          {users.map(user => (\n            <option\n              value={user.id}\n              key={user.id}\n            >\n              {user.name}\n            </option>\n          ))}\n        </select>\n      </label>\n    </header>\n  );\n};\n","import React from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { useSelector } from 'react-redux';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { getPostDetailsId } from './store/selectors';\nimport { Header } from './components/Header';\n\nconst App: React.FC = () => {\n  const postId = useSelector(getPostDetailsId);\n\n  return (\n    <div className=\"App\">\n      <Header />\n      <main className=\"App__main\">\n        <div className=\"App__sidebar\">\n          <PostsList />\n        </div>\n\n        {postId !== 0 && (\n          <div className=\"App__content\">\n            <PostDetails />\n          </div>\n        )}\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n\nimport App from './App';\nimport { store } from './store';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}